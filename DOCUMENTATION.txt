1. Configure the .env file
    DB_CONNECTION=mysql
    DB_HOST=127.0.0.1
    DB_PORT=3306
    DB_DATABASE=gestourage
    DB_USERNAME=root
    DB_PASSWORD=

2. Create Models and Controllers that may be used in checkout process in cmd
    php artisan make:model CartItem
    php artisan make:model Order
    php artisan make:model OrderDetail
    php artisan make:model Product

    php artisan make:controller CheckoutController

3. Create Routes on web.php
    use App\Http\Controllers\CheckoutController;

    Route::get('/checkout', [CheckoutController::class, 'index'])->name('checkout.index');
    Route::post('/checkout/process', [CheckoutController::class, 'process'])->name('checkout.process');
    Route::get('/checkout/success', function () {
        return view('checkout.success');
    })->name('checkout.success');

4. Create Views
    resources/views/checkout/index.blade.php
        - A basic checkout page that showcases Product, Quantity, Price of each, and Total in table format
        - Checkout button
    resources/views/checkout/success.blade.php
        - A basic success page acknowledging that the order has been placed.

5. Update Controller 
    app/Http/Controllers/CheckoutController.php
        - functions for the checkout process.
            - dynamically create the order and order_details table based on checked out items.
            - clear the user's cart after checking out.
            - redirect to success/confirmation page.

6. Update relationships, define models
    - app/Models/CartItem.php
    - app/Models/Product.php

7. Update controller base class
    app/Http/Controllers/Controller.php
        - ensure your Controller.php base class is present.

Notes:
    After doing the above steps, we are now able to manually insert data into the cart_items table and proceed to checkout.

    We found out that Laravel expects by default when using Eloquent models with timestamps tables 'orders' and 'order_details' must have columns 'updated_at' and 'created_at'. Thus adding these new columns will fix that problem.

    ALTER TABLE `orders`
    ADD COLUMN `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ADD COLUMN `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;

    ALTER TABLE `order_details`
    ADD COLUMN `created_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ADD COLUMN `updated_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP;


    After checking out, you can check the database if the 'order' and 'order_details' tables were properly populated.

    We inserted 10 dummy date into products table.
    We used a dummy user with userID = 1, and a shopping_cart for that user with cartID = 1 for testing purposes.

    Promotion/Discount functionality was not implemented.

GETTING STARTED:
    1. php artisan serve
    2. redirect to http://127.0.0.1:8000/checkout
    3. insert data into 'cart_items' table
        INSERT INTO `cart_items` (`cartID`, `productID`, `cartQuantity`, `cartPriceEach`)
        VALUES
        (1, 1, 2, 25.00),
        (1, 2, 1, 25.09),
        (1, 3, 3, 80.00),
        (1, 4, 1, 125.60),
        (1, 5, 2, 32.05);
    4. Refrech checkout page to check if products were properly reflected
    5. Proceed to checkout
    6. Check database if 'orders' and 'order_details' tables were populated